#!/usr/bin/env python3
from __future__ import annotations

import argparse
import io
import json
import os.path
import time
import urllib.parse
import urllib.request
import zipfile


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--task', required=True)
    parser.add_argument('--repo', required=True)
    parser.add_argument('--commit', required=True)
    parser.add_argument('--dest', default='dist')
    args = parser.parse_args()

    if os.environ.get('INPUT_TOKEN'):
        headers = {'Authorization': f'token {os.environ["INPUT_TOKEN"]}'}
    else:
        print('warn: set $INPUT_TOKEN if hitting rate limits')
        headers = {}

    params_s = urllib.parse.urlencode({'check_name': args.task})
    url = f'https://api.github.com/repos/{args.repo}/commits/{args.commit}/check-runs?{params_s}'  # noqa: E501
    req = urllib.request.Request(url, headers=headers)

    print('querying check-runs...')
    while True:
        contents = json.load(urllib.request.urlopen(req))
        if len(contents['check_runs']) != 1:
            print('no check runs...')
            time.sleep(5)
            continue

        check_run, = contents['check_runs']
        status = check_run['status']
        if status != 'completed':
            print(f'run not completed ({status})...')
            time.sleep(5)
            continue

        conclusion = check_run['conclusion']
        if conclusion != 'success':
            print(f'conclusion not success ({conclusion})...')
            return 1
        else:
            break

    print('downloading...')
    cirrus_task_id = check_run['external_id']
    url = f'https://api.cirrus-ci.com/v1/artifact/task/{cirrus_task_id}/binary.zip'  # noqa: E501

    for _ in range(5):
        try:
            resp = urllib.request.urlopen(url)
        except urllib.error.HTTPError as e:
            if e.code == 404:
                print('=> 404 for artifact... retrying')
                time.sleep(5)
            else:
                raise
        else:
            bio = io.BytesIO(resp.read())
            break
    else:
        raise SystemExit('artifact never appeared!')

    os.makedirs(args.dest, exist_ok=True)
    with zipfile.ZipFile(bio) as zipf:
        for info in zipf.infolist():
            info.filename = os.path.basename(info.filename)
            print(f'extracting {info.filename}...')
            zipf.extract(info, path=args.dest)

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
